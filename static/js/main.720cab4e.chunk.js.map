{"version":3,"sources":["components/capacity-forecast-chart/use-custom-bars.js","components/capacity-forecast-chart/capcaity-forecast-chart.js","components/editable-table/icons.js","components/editable-table/editable-table.js","data/mock/mock-capacity-forecast-data.js","App.js","serviceWorker.js","index.js"],"names":["getPath","x","y","width","height","useCustomBars","barGap","FullWidthBar","fill","d","getFullWidthPath","StandardBar","getStandardPath","COLORS","BLUE","blues","GREEN","greens","GREY","greys","ORANGE","oranges","PURPLE","purples","RED","reds","CapacityForecastChart","data","layout","margin","top","right","left","bottom","strokeDasharray","type","dataKey","shape","defaultProps","icons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","OPTIONS","padding","paging","search","showFirstLastPageButtons","containerStyle","EditableTable","initialColumns","initialData","onChange","title","useState","columns","setData","options","style","editable","onRowAdd","newData","Promise","resolve","setTimeout","updatedData","onRowUpdate","oldData","indexOf","onRowDelete","splice","stage","actual","goal","limit","simulation","defaultColumns","field","App","mockCapacityForecastData","Container","maxWidth","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.720cab4e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction getPath(x, y, width, height) {\n  return `M${x},${y} h${width} v${height} h${-width} v${-height} Z`;\n}\n\nfunction getFullWidthPath({ x, y, width, height, barGap }) {\n  const customY = y + (height + barGap) / 2;\n  const customHeight = 3 * height + 2 * barGap;\n  return getPath(x, customY, width, customHeight);\n}\n\nfunction getStandardPath({ x, y, width, height, barGap }) {\n  const customY = y - (height + barGap) / 2;\n  return getPath(x, customY, width, height);\n}\n\nexport default function useCustomBars(barGap) {\n  function FullWidthBar({ fill, x, y, width, height }) {\n    const d = getFullWidthPath({ x, y, width, height, barGap });\n    return <path d={d} fill={fill} />;\n  }\n\n  function StandardBar({ fill, x, y, width, height }) {\n    const d = getStandardPath({ x, y, width, height, barGap });\n    return <path d={d} fill={fill} />;\n  }\n\n  return { FullWidthBar, StandardBar };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Bar,\n  CartesianGrid,\n  ComposedChart,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from \"recharts\";\nimport blues from \"@material-ui/core/colors/blue\";\nimport greens from \"@material-ui/core/colors/green\";\nimport greys from \"@material-ui/core/colors/grey\";\nimport oranges from \"@material-ui/core/colors/orange\";\nimport purples from \"@material-ui/core/colors/purple\";\nimport reds from \"@material-ui/core/colors/red\";\nimport useCustomBars from \"./use-custom-bars\";\n\nconst SHADE = 200;\nconst COLORS = {\n  BLUE: blues[SHADE],\n  GREEN: greens[SHADE],\n  GREY: greys[SHADE],\n  ORANGE: oranges[SHADE],\n  PURPLE: purples[SHADE],\n  RED: reds[SHADE]\n};\n\nfunction CapacityForecastChart({ barGap, data }) {\n  const { FullWidthBar, StandardBar } = useCustomBars(barGap);\n\n  return (\n    <ResponsiveContainer height={400} width=\"100%\">\n      <ComposedChart\n        barGap={barGap}\n        data={data}\n        layout=\"vertical\"\n        margin={{ top: 20, right: 50, left: 20, bottom: 20 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis type=\"number\" />\n        <YAxis dataKey=\"stage\" type=\"category\" />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"goal\" fill={COLORS.GREY} shape={<FullWidthBar />} />\n        <Bar dataKey=\"simulation\" fill={COLORS.BLUE} shape={<StandardBar />} />\n        <Bar dataKey=\"limit\" fill={COLORS.PURPLE} shape={<StandardBar />} />\n        <Bar dataKey=\"actual\" fill={COLORS.GREEN} shape={<StandardBar />} />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n}\n\nCapacityForecastChart.propTypes = {\n  barGap: PropTypes.number,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nCapacityForecastChart.defaultProps = {\n  barGap: 0\n};\n\nexport default CapacityForecastChart;\n","import React, { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nexport default icons;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MaterialTable from \"material-table\";\nimport icons from \"./icons\";\n\nconst OPTIONS = {\n  padding: \"dense\",\n  paging: false,\n  search: false,\n  showFirstLastPageButtons: false\n};\nconst containerStyle = { padding: 10 };\n\nexport default function EditableTable({\n  initialColumns,\n  initialData,\n  onChange,\n  title\n}) {\n  const [columns] = useState(initialColumns, [initialColumns]);\n  const [data, setData] = useState(initialData, [initialData]);\n\n  return (\n    <MaterialTable\n      columns={columns}\n      data={data}\n      icons={icons}\n      options={OPTIONS}\n      style={containerStyle}\n      title={title}\n      editable={{\n        onRowAdd: newData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              const updatedData = [...data, newData];\n              resolve();\n              setData(updatedData);\n              onChange(updatedData);\n            }, 600);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              if (oldData) {\n                const updatedData = [...data];\n                updatedData[updatedData.indexOf(oldData)] = newData;\n                setData(updatedData);\n                onChange(updatedData);\n              }\n            }, 600);\n          }),\n        onRowDelete: oldData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              const updatedData = [...data];\n              updatedData.splice(updatedData.indexOf(oldData), 1);\n              resolve();\n              setData(updatedData);\n              onChange(updatedData);\n            }, 600);\n          })\n      }}\n    />\n  );\n}\n\nEditableTable.propTypes = {\n  initialColumns: PropTypes.array.isRequired,\n  initialData: PropTypes.array.isRequired,\n  onChange: PropTypes.func,\n  title: PropTypes.string.isRequired\n};\n\nEditableTable.defaultProps = {\n  onChange: () => {}\n};\n","const data = [\n  {\n    stage: \"CW\",\n    actual: 117,\n    goal: 144,\n    limit: 80,\n    simulation: 150\n  },\n  {\n    stage: \"SQO\",\n    actual: 1381,\n    goal: 1218,\n    limit: 360,\n    simulation: 1300\n  },\n  {\n    stage: \"SAL\",\n    actual: 1189,\n    goal: 1360,\n    limit: 100,\n    simulation: 1400\n  },\n  {\n    stage: \"SQL\",\n    actual: 1186,\n    goal: 1495,\n    limit: 120,\n    simulation: 1200\n  },\n  {\n    stage: \"MQL\",\n    actual: 5185,\n    goal: 7189,\n    limit: 1000,\n    simulation: 7200\n  },\n  {\n    stage: \"AQL\",\n    actual: 22592,\n    goal: 28757,\n    limit: 4000,\n    simulation: 25000\n  }\n];\n\nexport default data;\n","import React, { useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CapacityForecastChart from \"./components/capacity-forecast-chart/capcaity-forecast-chart\";\nimport EditableTable from \"./components/editable-table/editable-table\";\nimport mockCapacityForecastData from \"./data/mock/mock-capacity-forecast-data\";\nimport \"./App.css\";\n\nconst defaultColumns = [\n  { title: \"Stage\", field: \"stage\" },\n  { title: \"Goal\", field: \"goal\", type: \"numeric\" },\n  { title: \"Simulation\", field: \"simulation\", type: \"numeric\" },\n  { title: \"Limit\", field: \"limit\", type: \"numeric\" },\n  { title: \"Actual\", field: \"actual\", type: \"numeric\" }\n];\nconst style = { margin: 10 };\n\nfunction App() {\n  const [data, setData] = useState(mockCapacityForecastData);\n  return (\n    <Container maxWidth=\"md\">\n      <div style={style}>\n        <EditableTable\n          initialColumns={defaultColumns}\n          initialData={mockCapacityForecastData}\n          onChange={setData}\n          title=\"Capacity Forecast Settings\"\n        />\n      </div>\n      <Paper elevation={3} style={style}>\n        <CapacityForecastChart data={data} />\n      </Paper>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}